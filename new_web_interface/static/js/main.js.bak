/**
 * Main JavaScript for S&P 500 Trading Strategy Web Interface
 */

// Base URL for API calls
const baseUrl = '';

// Document ready
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
    if (tooltipTriggerList) {
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }

    // Initialize popovers
    const popoverTriggerList = document.querySelectorAll('[data-bs-toggle="popover"]');
    if (popoverTriggerList) {
        popoverTriggerList.forEach(function (popoverTriggerEl) {
            new bootstrap.Popover(popoverTriggerEl);
        });
    }

    // Emergency Stop button
    const emergencyStopBtn = document.getElementById('emergencyStopBtn');
    if (emergencyStopBtn) {
        emergencyStopBtn.addEventListener('click', function() {
            // Show modal instead of confirm
            const emergencyStopModal = document.getElementById('emergencyStopModal');
            if (emergencyStopModal) {
                const modal = new bootstrap.Modal(emergencyStopModal);
                modal.show();
            }
        });
    }

    // Confirm Emergency Stop
    const confirmEmergencyStop = document.getElementById('confirmEmergencyStop');
    if (confirmEmergencyStop) {
        confirmEmergencyStop.addEventListener('click', function() {
            fetch(baseUrl + '/emergency_stop', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('success', data.message);
                } else {
                    showToast('danger', data.message);
                }
                
                // Hide modal
                const emergencyStopModal = document.getElementById('emergencyStopModal');
                if (emergencyStopModal) {
                    const modal = bootstrap.Modal.getInstance(emergencyStopModal);
                    modal.hide();
                }
            })
            .catch(error => {
                console.error('Error during emergency stop:', error);
                showToast('danger', 'Error during emergency stop: ' + error);
                
                // Hide modal
                const emergencyStopModal = document.getElementById('emergencyStopModal');
                if (emergencyStopModal) {
                    const modal = bootstrap.Modal.getInstance(emergencyStopModal);
                    modal.hide();
                }
            });
        });
    }

    // Setup auto-refresh for processes and backtest results
    setupAutoRefresh();
});

/**
 * Set up auto-refresh for processes and backtest results tables
 */
function setupAutoRefresh() {
    // Refresh active processes every 5 seconds
    const processesTableBody = document.getElementById('processesTableBody');
    if (processesTableBody) {
        setInterval(function() {
            fetch(baseUrl + '/get_processes')
                .then(response => response.json())
                .then(data => {
                    processesTableBody.innerHTML = '';
                    
                    if (!data.processes || data.processes.length === 0) {
                        processesTableBody.innerHTML = '<tr><td colspan="4" class="text-center">No active processes</td></tr>';
                    } else {
                        data.processes.forEach(process => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${process.name}</td>
                                <td>${process.status}</td>
                                <td>${process.start_time}</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="stopProcess('${process.name}')">Stop</button>
                                    <button class="btn btn-sm btn-info" onclick="viewProcessLogs('${process.name}', ${JSON.stringify(process.logs)})">Logs</button>
                                </td>
                            `;
                            processesTableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching processes:', error);
                });
        }, 5000);
    }
    
    // Refresh backtest results every 10 seconds
    const backtestResultsTableBody = document.getElementById('backtestResultsTableBody');
    if (backtestResultsTableBody) {
        setInterval(function() {
            fetch(baseUrl + '/get_backtest_results')
                .then(response => response.json())
                .then(data => {
                    backtestResultsTableBody.innerHTML = '';
                    
                    if (!data.results || data.results.length === 0) {
                        backtestResultsTableBody.innerHTML = '<tr><td colspan="5" class="text-center">No backtest results</td></tr>';
                    } else {
                        data.results.forEach(result => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${result.filename}</td>
                                <td>${result.date || 'N/A'}</td>
                                <td>${result.profit_loss || 'N/A'}</td>
                                <td>${result.win_rate || 'N/A'}</td>
                                <td>
                                    <a href="${baseUrl}/view_backtest_result/${result.filename}" class="btn btn-sm btn-primary">View</a>
                                </td>
                            `;
                            backtestResultsTableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching backtest results:', error);
                });
        }, 10000);
    }
}

/**
 * Show toast notification
 * @param {string} type - Toast type (success, danger, warning, info)
 * @param {string} message - Toast message
 */
function showToast(type, message) {
    // Create toast container if it doesn't exist
    let toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
        toastContainer = document.createElement('div');
        toastContainer.id = 'toastContainer';
        toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
        document.body.appendChild(toastContainer);
    }
    
    // Create toast
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;
    
    // Add toast to container
    toastContainer.appendChild(toast);
    
    // Show toast
    const bsToast = new bootstrap.Toast(toast, {
        autohide: true,
        delay: 5000
    });
    bsToast.show();
    
    // Remove toast after it's hidden
    toast.addEventListener('hidden.bs.toast', function() {
        toast.remove();
    });
}

/**
 * Format date string
 * @param {string} dateString - Date string
 * @returns {string} - Formatted date string
 */
function formatDate(dateString) {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

/**
 * Format number as currency
 * @param {number} value - Number to format
 * @returns {string} - Formatted currency string
 */
function formatCurrency(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
    }).format(value);
}

/**
 * Format number as percentage
 * @param {number} value - Number to format
 * @returns {string} - Formatted percentage string
 */
function formatPercent(value) {
    return new Intl.NumberFormat('en-US', {
        style: 'percent',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).format(value);
}

/**
 * Stop a process
 * @param {string} processName - Name of the process to stop
 */
function stopProcess(processName) {
    if (confirm(`Are you sure you want to stop the process "${processName}"?`)) {
        fetch(baseUrl + '/stop_process/' + processName, {
            method: 'POST'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast('success', data.message);
            } else {
                showToast('danger', data.message);
            }
        })
        .catch(error => {
            console.error('Error stopping process:', error);
            showToast('danger', 'Error stopping process: ' + error);
        });
    }
}

/**
 * View process logs
 * @param {string} processName - Name of the process
 * @param {Array} logs - Array of log lines
 */
function viewProcessLogs(processName, logs) {
    // Create modal if it doesn't exist
    const processLogsModal = document.getElementById('processLogsModal');
    if (!processLogsModal) {
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'processLogsModal';
        modal.tabIndex = '-1';
        modal.setAttribute('aria-hidden', 'true');
        
        modal.innerHTML = `
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-info text-white">
                        <h5 class="modal-title">Process Logs</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <pre id="processLogsContent" class="bg-dark text-light p-3" style="max-height: 400px; overflow-y: auto;"></pre>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
    }
    
    // Update modal title and content
    const modalTitle = document.querySelector('#processLogsModal .modal-title');
    if (modalTitle) {
        modalTitle.textContent = `Process Logs: ${processName}`;
    }
    
    const logsContent = document.getElementById('processLogsContent');
    if (logsContent) {
        logsContent.textContent = logs ? logs.join('\n') : 'No logs available';
    }
    
    // Scroll to bottom of logs
    if (logsContent) {
        logsContent.scrollTop = logsContent.scrollHeight;
    }
    
    // Show modal
    if (processLogsModal) {
        const modal = new bootstrap.Modal(processLogsModal);
        modal.show();
    }
}
