{% extends 'base.html' %}

{% block title %}Dashboard - S&P 500 Trading Strategy{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">Trading Strategy Dashboard</h1>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Run Paper Trading</h5>
            </div>
            <div class="card-body">
                <form id="paperTradingForm">
                    <div class="mb-3">
                        <label for="maxSignals" class="form-label">Max Signals</label>
                        <input type="number" class="form-control" id="maxSignals" name="max_signals" value="20" min="1" max="100">
                    </div>
                    <div class="mb-3">
                        <label for="duration" class="form-label">Duration (hours)</label>
                        <input type="number" class="form-control" id="duration" name="duration" value="1" min="1" max="24">
                    </div>
                    <div class="mb-3">
                        <label for="interval" class="form-label">Check Interval (minutes)</label>
                        <input type="number" class="form-control" id="interval" name="interval" value="5" min="1" max="60">
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Start Paper Trading</button>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-danger text-white">
                <h5 class="card-title mb-0">Run Live Trading</h5>
            </div>
            <div class="card-body">
                <form id="liveTradingForm">
                    <div class="mb-3">
                        <label for="liveMaxSignals" class="form-label">Max Signals</label>
                        <input type="number" class="form-control" id="liveMaxSignals" name="max_signals" value="10" min="1" max="50">
                    </div>
                    <div class="mb-3">
                        <label for="liveCheckInterval" class="form-label">Check Interval (minutes)</label>
                        <input type="number" class="form-control" id="liveCheckInterval" name="check_interval" value="5" min="1" max="60">
                    </div>
                    <div class="mb-3">
                        <label for="liveMaxCapital" class="form-label">Max Capital</label>
                        <input type="number" class="form-control" id="liveMaxCapital" name="max_capital" value="50000" min="10000" max="1000000">
                    </div>
                    <div class="mb-3">
                        <label for="liveRiskLevel" class="form-label">Risk Level</label>
                        <select class="form-select" id="liveRiskLevel" name="risk_level">
                            <option value="low">Low</option>
                            <option value="medium" selected>Medium</option>
                            <option value="high">High</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-danger w-100">Start Live Trading</button>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header bg-warning text-dark">
                <h5 class="card-title mb-0">Run Comprehensive Backtest</h5>
            </div>
            <div class="card-body">
                <form id="comprehensiveBacktestForm">
                    <div class="mb-3">
                        <label for="quarters" class="form-label">Quarters to Test</label>
                        <input type="text" class="form-control" id="quarters" name="quarters" value="Q1_2023,Q2_2023">
                        <small class="form-text text-muted">Comma-separated list of quarters (e.g., Q1_2023,Q2_2023) or 'all' for all quarters</small>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="useCustomDateRange" name="use_custom_date_range">
                            <label class="form-check-label" for="useCustomDateRange">
                                Use Custom Date Range
                            </label>
                            <small class="form-text text-muted d-block">Use specific start and end dates instead of quarters</small>
                        </div>
                    </div>
                    <div class="mb-3 custom-date-range-fields" style="display: none;">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="customStartDate" class="form-label">Start Date</label>
                                <input type="date" class="form-control" id="customStartDate" name="custom_start_date">
                            </div>
                            <div class="col-md-6">
                                <label for="customEndDate" class="form-label">End Date</label>
                                <input type="date" class="form-control" id="customEndDate" name="custom_end_date">
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="maxSignalsBacktest" class="form-label">Max Signals</label>
                        <input type="number" class="form-control" id="maxSignalsBacktest" name="max_signals" value="{{ config.backtest.max_signals_per_day|default(40) }}" min="1" max="100">
                        <small class="form-text text-muted">Maximum number of signals to generate</small>
                    </div>
                    <div class="mb-3">
                        <label for="initialCapital" class="form-label">Initial Capital</label>
                        <input type="number" class="form-control" id="initialCapital" name="initial_capital" value="{{ config.initial_capital|default(300) }}" min="100">
                        <small class="form-text text-muted">Starting capital for the backtest</small>
                    </div>
                    <div class="mb-3">
                        <label for="numRuns" class="form-label">Number of Runs</label>
                        <input type="number" class="form-control" id="numRuns" name="num_runs" value="5" min="1" max="20">
                        <small class="form-text text-muted">Multiple runs with different random seeds for statistical significance</small>
                    </div>
                    <div class="mb-3">
                        <label for="randomSeed" class="form-label">Random Seed</label>
                        <input type="number" class="form-control" id="randomSeed" name="random_seed" value="42" min="1" max="1000">
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="multipleRuns" name="multiple_runs">
                            <label class="form-check-label" for="multipleRuns">
                                Use Multiple Runs
                            </label>
                            <small class="form-text text-muted d-block">Run multiple backtests and average the results</small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="continuousCapital" name="continuous_capital">
                            <label class="form-check-label" for="continuousCapital">
                                Use Continuous Capital
                            </label>
                            <small class="form-text text-muted d-block">Pass final balance from one quarter to the next</small>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="weeklySelection" name="weekly_selection">
                            <label class="form-check-label" for="weeklySelection">
                                Weekly Selection
                            </label>
                            <small class="form-text text-muted d-block">Enable weekly stock selection refresh</small>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-warning w-100">Start Comprehensive Backtest</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">Active Processes</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="processesTable">
                        <thead>
                            <tr>
                                <th>Process Name</th>
                                <th>Status</th>
                                <th>Start Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="processesTableBody">
                            <tr>
                                <td colspan="4" class="text-center">No active processes</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0">Backtest Results</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="backtestResultsTable">
                        <thead>
                            <tr>
                                <th>Filename</th>
                                <th>Date</th>
                                <th>Profit/Loss</th>
                                <th>Win Rate</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="backtestResultsTableBody">
                            <tr>
                                <td colspan="5" class="text-center">No backtest results</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Refresh active processes every 5 seconds
        setInterval(function() {
            fetch('/get_processes')
                .then(response => response.json())
                .then(data => {
                    const processesTableBody = document.getElementById('processesTableBody');
                    processesTableBody.innerHTML = '';
                    
                    if (data.processes.length === 0) {
                        processesTableBody.innerHTML = '<tr><td colspan="4" class="text-center">No active processes</td></tr>';
                    } else {
                        data.processes.forEach(process => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${process.name}</td>
                                <td>${process.status}</td>
                                <td>${process.start_time}</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="stopProcess('${process.name}')">Stop</button>
                                    <button class="btn btn-sm btn-info" onclick="viewProcessLogs('${process.name}', ${JSON.stringify(process.logs)})">Logs</button>
                                </td>
                            `;
                            processesTableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching processes:', error);
                });
        }, 5000);
        
        // Refresh backtest results every 10 seconds
        setInterval(function() {
            fetch('/get_backtest_results')
                .then(response => response.json())
                .then(data => {
                    const backtestResultsTableBody = document.getElementById('backtestResultsTableBody');
                    backtestResultsTableBody.innerHTML = '';
                    
                    if (data.results.length === 0) {
                        backtestResultsTableBody.innerHTML = '<tr><td colspan="5" class="text-center">No backtest results</td></tr>';
                    } else {
                        data.results.forEach(result => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${result.filename}</td>
                                <td>${result.date}</td>
                                <td>${result.profit_loss || 'N/A'}</td>
                                <td>${result.win_rate || 'N/A'}</td>
                                <td>
                                    <a href="/view_backtest_result/${result.filename}" class="btn btn-sm btn-primary">View</a>
                                </td>
                            `;
                            backtestResultsTableBody.appendChild(row);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching backtest results:', error);
                });
        }, 10000);
        
        // Comprehensive Backtest Form
        document.getElementById('comprehensiveBacktestForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            fetch('/run_comprehensive_backtest', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('success', data.message);
                } else {
                    showToast('danger', data.message);
                }
            })
            .catch(error => {
                console.error('Error running comprehensive backtest:', error);
                showToast('danger', 'Error running comprehensive backtest: ' + error);
            });
        });
        
        // Paper Trading Form
        document.getElementById('paperTradingForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            fetch('/run_paper_trading', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('success', data.message);
                } else {
                    showToast('danger', data.message);
                }
            })
            .catch(error => {
                console.error('Error running paper trading:', error);
                showToast('danger', 'Error running paper trading: ' + error);
            });
        });
        
        // Live Trading Form
        document.getElementById('liveTradingForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            fetch('/run_live_trading', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('success', data.message);
                } else {
                    showToast('danger', data.message);
                }
            })
            .catch(error => {
                console.error('Error running live trading:', error);
                showToast('danger', 'Error running live trading: ' + error);
            });
        });
        
        // Show custom date range fields when checkbox is checked
        document.getElementById('useCustomDateRange').addEventListener('change', function() {
            const customDateRangeFields = document.querySelector('.custom-date-range-fields');
            if (this.checked) {
                customDateRangeFields.style.display = 'block';
            } else {
                customDateRangeFields.style.display = 'none';
            }
        });
        
        // Fetch active processes
        function fetchProcesses() {
            fetch('/get_processes')
                .then(response => response.json())
                .then(data => {
                    updateProcessesTable(data);
                    // Refresh processes every 5 seconds
                    setTimeout(fetchProcesses, 5000);
                })
                .catch(error => {
                    console.error('Error fetching processes:', error);
                    // Retry after 10 seconds on error
                    setTimeout(fetchProcesses, 10000);
                });
        }
        
        // Update processes table
        function updateProcessesTable(processes) {
            const table = document.getElementById('processesTable');
            const tbody = table.querySelector('tbody');
            
            // Clear table
            tbody.innerHTML = '';
            
            // Check if there are any processes
            if (Object.keys(processes).length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="4" class="text-center">No active processes</td>';
                tbody.appendChild(row);
                return;
            }
            
            // Add processes to table
            for (const [processName, process] of Object.entries(processes)) {
                const row = document.createElement('tr');
                
                // Set row color based on status
                if (process.status === 'running') {
                    row.classList.add('table-primary');
                } else if (process.status === 'completed') {
                    row.classList.add('table-success');
                } else if (process.status === 'failed') {
                    row.classList.add('table-danger');
                } else if (process.status === 'terminated') {
                    row.classList.add('table-warning');
                }
                
                // Add cells
                row.innerHTML = `
                    <td>${processName}</td>
                    <td>${process.status}</td>
                    <td>${process.start_time}</td>
                    <td>
                        ${process.status === 'running' ? 
                            `<button class="btn btn-sm btn-danger stop-process" data-process="${processName}">Stop</button>` : 
                            ''}
                        <button class="btn btn-sm btn-info view-logs" data-process="${processName}" data-bs-toggle="modal" data-bs-target="#processLogsModal">View Logs</button>
                    </td>
                `;
                
                tbody.appendChild(row);
            }
            
            // Add event listeners for stop buttons
            document.querySelectorAll('.stop-process').forEach(button => {
                button.addEventListener('click', function() {
                    const processName = this.getAttribute('data-process');
                    stopProcess(processName);
                });
            });
            
            // Add event listeners for view logs buttons
            document.querySelectorAll('.view-logs').forEach(button => {
                button.addEventListener('click', function() {
                    const processName = this.getAttribute('data-process');
                    viewProcessLogs(processName, processes[processName].logs);
                });
            });
        }
        
        // Stop a process
        function stopProcess(processName) {
            if (confirm(`Are you sure you want to stop the process "${processName}"?`)) {
                fetch('/stop_process/' + processName, {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('success', data.message);
                    } else {
                        showToast('danger', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error stopping process:', error);
                    showToast('danger', 'Error stopping process: ' + error);
                });
            }
        }
        
        // View process logs
        function viewProcessLogs(processName, logs) {
            // Create modal if it doesn't exist
            if (!document.getElementById('processLogsModal')) {
                const modal = document.createElement('div');
                modal.className = 'modal fade';
                modal.id = 'processLogsModal';
                modal.tabIndex = '-1';
                modal.setAttribute('aria-hidden', 'true');
                
                modal.innerHTML = `
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header bg-info text-white">
                                <h5 class="modal-title">Process Logs</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <pre id="processLogsContent" class="bg-dark text-light p-3" style="max-height: 400px; overflow-y: auto;"></pre>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(modal);
            }
            
            // Update modal title and content
            const modalTitle = document.querySelector('#processLogsModal .modal-title');
            modalTitle.textContent = `Process Logs: ${processName}`;
            
            const logsContent = document.getElementById('processLogsContent');
            logsContent.textContent = logs.join('\n');
            
            // Scroll to bottom of logs
            logsContent.scrollTop = logsContent.scrollHeight;
        }
        
        // Fetch backtest results
        function fetchBacktestResults() {
            fetch('/get_backtest_results')
                .then(response => response.json())
                .then(data => {
                    updateBacktestResultsTable(data);
                    // Refresh results every 10 seconds
                    setTimeout(fetchBacktestResults, 10000);
                })
                .catch(error => {
                    console.error('Error fetching backtest results:', error);
                    // Retry after 20 seconds on error
                    setTimeout(fetchBacktestResults, 20000);
                });
        }
        
        // Update backtest results table
        function updateBacktestResultsTable(data) {
            const table = document.getElementById('backtestResultsTable');
            const tbody = table.querySelector('tbody');
            
            // Clear table
            tbody.innerHTML = '';
            
            // Get results array from data object
            const results = data.results || [];
            
            // Get results array from data object
            const results = data.results || [];
            
            // Get results array from data object
            const results = data.results || [];
            
            // Get results array from data object
            const results = data.results || [];
            
            // Check if there are any results
            if (results.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="5" class="text-center">No backtest results found</td>';
                tbody.appendChild(row);
                return;
            }
            
            // Add results to table
            for (const result of results) {
                const row = document.createElement('tr');
                
                // Format quarter/date range
                let dateRange = result.quarter || '';
                if (result.date_range) {
                    dateRange += dateRange ? ` (${result.date_range})` : result.date_range;
                }
                
                // Add cells
                row.innerHTML = `
                    <td>${result.filename}</td>
                    <td>${dateRange}</td>
                    <td>${result.modified}</td>
                    <td>
                        <a href="/view_backtest_result/${result.filename}" class="btn btn-sm btn-primary" target="_blank">View</a>
                    </td>
                `;
                
                tbody.appendChild(row);
            }
        }
        
        // Show toast notification
        function showToast(type, message) {
            // Create toast container if it doesn't exist
            const toastContainer = document.getElementById('toastContainer');
            
            // Create toast
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;
            
            // Add toast to container
            toastContainer.appendChild(toast);
            
            // Show toast
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 5000
            });
            bsToast.show();
            
            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', function() {
                toast.remove();
            });
        }
        
        fetchProcesses();
        fetchBacktestResults();
    });
</script>
{% endblock %}
